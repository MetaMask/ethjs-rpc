!function(r,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("EthRPC",[],t):"object"==typeof exports?exports.EthRPC=t():r.EthRPC=t()}(this,function(){return function(r){function t(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return r[o].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var e={};return t.m=r,t.c=e,t.i=function(r){return r},t.d=function(r,t,e){Object.defineProperty(r,t,{configurable:!1,enumerable:!0,get:e})},t.o=function(r,t){return Object.prototype.hasOwnProperty.call(r,t)},t.p="",t(t.s=0)}([function(r,t){"use strict";function e(r,t){var o=this,n=t||{};if(!(this instanceof e))throw Error('[ethjs-rpc] the EthRPC object requires the "new" flag in order to function normally (i.e. `const eth = new EthRPC(provider);`).');o.options=Object.assign({jsonSpace:n.jsonSpace||0,max:n.max||9999999999999}),o.idCounter=Math.floor(Math.random()*o.options.max),(o.setProvider=function(r){if("object"!=typeof r)throw Error("[ethjs-rpc] the EthRPC object requires that the first input 'provider' must be an object, got '"+typeof r+"' (i.e. 'const eth = new EthRPC(provider);')");o.currentProvider=r})(r)}function o(r,t){return Object.assign({},{id:t,jsonrpc:"2.0",params:[]},r)}r.exports=e,e.prototype.sendAsync=function(r,t){var e=this;e.idCounter=e.idCounter%e.options.max;var n=o(r,e.idCounter++);try{e.currentProvider.sendAsync(n,function(r,o){var i=o||{};if(r||i.error){var s="[ethjs-rpc] "+(i.error&&"rpc"||"")+" error with payload "+JSON.stringify(n,null,e.options.jsonSpace)+" "+(r+""||JSON.stringify(i.error,null,e.options.jsonSpace)),c=Error(s);return c.value=r||i.error,t(c,null)}return t(null,i.result)})}catch(i){var s=Error("[ethjs-rpc] error while sending async request to provider..");s.value=i,t(s,null)}}}])});